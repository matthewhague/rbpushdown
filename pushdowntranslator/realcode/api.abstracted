list crypto_alg_list
lock crypto_alg_sem

procedure crypto_alg_get()
{
	return ??
}

procedure crypto_alg_put()
{
	if ??
		skip
}

procedure crypto_alg_lookup()
{
	bool alg = 0

	if ??
		return NULL;

	lock crypto_alg_sem

	for_each (q, &crypto_alg_list, cra_list) {
		if ?? {
			if crypto_alg_get()
				alg = 1
			break;
		}
	}

	unlock crypto_alg_sem

	return alg;
}

procedure crypto_init_flags()
{
	switch (??) {
	case:
		return crypto_init_cipher_flags()

	case: 
		return crypto_init_digest_flags()

	case:
		return crypto_init_compress_flags()

	default:
		break;
	}

	return 0
}

procedure crypto_init_ops()
{
	switch (??) {
	case:
		return crypto_init_cipher_ops()

	case:
		return crypto_init_digest_ops()

	case:
		return crypto_init_compress_ops()

	default:
		break;
	}

	return 0
}

procedure crypto_exit_ops()
{
	switch (??) {
	case:
		crypto_exit_cipher_ops()
		break

	case:
		crypto_exit_digest_ops()
		break

	case:
		crypto_exit_compress_ops()
		break

	default:

	}
}

procedure crypto_alloc_tfm()
{
	bool tfm = 0
	bool alg;

	alg = crypto_alg_mod_lookup()
	if (!alg)
		goto out;

	tfm = kzalloc(sizeof(*tfm) + alg->cra_ctxsize, GFP_KERNEL);
	if (tfm == NULL)
		goto out_put;

	tfm->__crt_alg = alg;

	if (crypto_init_flags(tfm, flags))
		goto out_free_tfm;

	if (crypto_init_ops(tfm)) {
		crypto_exit_ops(tfm);
		goto out_free_tfm;
	}

	goto out;

out_free_tfm:
	kfree(tfm);
	tfm = NULL;
out_put:
	crypto_alg_put(alg);
out:
	return tfm;
}

void crypto_free_tfm(struct crypto_tfm *tfm)
{
	struct crypto_alg *alg = tfm->__crt_alg;
	int size = sizeof(*tfm) + alg->cra_ctxsize;

	crypto_exit_ops(tfm);
	crypto_alg_put(alg);
	memset(tfm, 0, size);
	kfree(tfm);
}

int crypto_register_alg(struct crypto_alg *alg)
{
	int ret = 0;
	struct crypto_alg *q;

	down_write(&crypto_alg_sem);

	list_for_each_entry(q, &crypto_alg_list, cra_list) {
		if (!(strcmp(q->cra_name, alg->cra_name))) {
			ret = -EEXIST;
			goto out;
		}
	}

	list_add_tail(&alg->cra_list, &crypto_alg_list);
out:
	up_write(&crypto_alg_sem);
	return ret;
}

int crypto_unregister_alg(struct crypto_alg *alg)
{
	int ret = -ENOENT;
	struct crypto_alg *q;

	BUG_ON(!alg->cra_module);

	down_write(&crypto_alg_sem);
	list_for_each_entry(q, &crypto_alg_list, cra_list) {
		if (alg == q) {
			list_del(&alg->cra_list);
			ret = 0;
			goto out;
		}
	}
out:
	up_write(&crypto_alg_sem);
	return ret;
}

int crypto_alg_available(const char *name, u32 flags)
{
	int ret = 0;
	struct crypto_alg *alg = crypto_alg_mod_lookup(name);

	if (alg) {
		crypto_alg_put(alg);
		ret = 1;
	}

	return ret;
}

static int __init init_crypto(void)
{
	printk(KERN_INFO "Initializing Cryptographic API\n");
	crypto_init_proc();
	return 0;
}

__initcall(init_crypto);

/*
EXPORT_SYMBOL_GPL(crypto_register_alg);
EXPORT_SYMBOL_GPL(crypto_unregister_alg);
EXPORT_SYMBOL_GPL(crypto_alloc_tfm);
EXPORT_SYMBOL_GPL(crypto_free_tfm);
EXPORT_SYMBOL_GPL(crypto_alg_available);
*/

EXPORT_SYMBOL_NOVERS(crypto_register_alg);
EXPORT_SYMBOL_NOVERS(crypto_unregister_alg);
EXPORT_SYMBOL_NOVERS(crypto_alloc_tfm);
EXPORT_SYMBOL_NOVERS(crypto_free_tfm);
EXPORT_SYMBOL_NOVERS(crypto_alg_available);
